import asyncio
import random

"""
Аналогия из реалии
event-loop Координатор отвечает за обраюотку всех заказов и отправку их на выполнения
Клиенты :
(код, который вызывает асинхронные функции) делают заказы (создают задачи) и передают их координатору;
Координатор: 
(event loop) заносит заказы (задачи) в очередь и обрабатывает их по порядку;
Если какой-то заказ (задача) требует времени для выполнения (например, ожидание ответа от внешнего источника данных - API, БД и т.д.), координатор ставит его на паузу и переходит к следующему заказу (задаче), чтобы оптимально использовать время и ресурсы;
Когда заказы, требующие ожидания, завершаются, координатор продолжает их обработку и возвращает результаты клиентам. 
"""

class Pizzeria:
    def __init__(self, name):
        self.name = name

    async def make_pizz(self,order_id):
        cook_time = random.randint(1,5) # случайное время готовки пиццы от 1 до 5
        print(f' Пиццерия {self.name} начала готовить пиццу для заказа {order_id}')
        await asyncio.sleep(cook_time)
        print(f' Пиццерия {self.name} закончила готовить пиццу для заказа {order_id}')

async def main():
    pizzeria = Pizzeria('Тесто и сыр')
    task = [pizzeria.make_pizz(i) for i in range(1,6)]
    await asyncio.gather(*task)

asyncio.run(main())
